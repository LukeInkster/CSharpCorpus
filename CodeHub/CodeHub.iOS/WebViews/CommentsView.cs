#pragma warning disable 1591
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace CodeHub.iOS.WebViews
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 2 "CommentsView.cshtml"
using Humanizer;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class CommentsView : CommentsViewBase
{

#line hidden

#line 1 "CommentsView.cshtml"
public CommentModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<html><head>\n<meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable" +
"=0\"");

WriteLiteral("/>\n<style>\n* {\n-webkit-touch-callout: none;\n-webkit-user-select: none;\n\n}\n\nhtml {" +
"\n    -webkit-text-size-adjust: none;\n}\n\nbody{\n    font-family: \"Helvetica Neue\"," +
" Helvetica;\n    font-size: ");


#line 18 "CommentsView.cshtml"
           Write(Model.FontSize);


#line default
#line hidden
WriteLiteral(@"px;
    margin: 0px;
    word-wrap: break-word;
}

a {
    color: #406fb9;
    text-decoration: none;
}

#main > .comment:first-child {
border-top: none;
}

#main > .comment {
    border-top: 1px solid #c8c8c8;
    padding: 8px 0 0 0;
}

#main > .comment > img {
    position: absolute;
    border-radius: 16px;
    margin-left: 8px;
    margin-top: 1px;
    margin-bottom: 8px;
    width: 32px;
    height: 32px;
}

#main > .comment > div {
margin-left: 48px;
margin-right: 8px;
}

#main > .comment > div > h1 {
font-size: ");


#line 53 "CommentsView.cshtml"
       Write(Model.FontSize);


#line default
#line hidden
WriteLiteral("px;\nmargin: 0;\ncolor: #406fb9;\nwhite-space: nowrap;\noverflow: hidden;\n}\n\n#main > " +
".comment > div > h2 {\nfont-size: ");


#line 61 "CommentsView.cshtml"
       Write(Model.FontSize - 2);


#line default
#line hidden
WriteLiteral("px;\nmargin: 0 0 4px 0;\nfont-weight: normal;\ncolor: #404040;\nwhite-space: nowrap;\n" +
"overflow: hidden;\n}\n\n#main > .comment > div > div {\nmargin: 0;\nword-wrap: break-" +
"word;\n}\n\n#main > .comment > div > .mark {\n    margin-top: 8px;\n    margin-bottom" +
": 8px;\n    margin-right: 8px;\n}\n\n#main > .comment > div > div img {\nmax-width: 1" +
"00%;\n}\n\n#main { width: 100%; }\n\nimg { max-width: 100%; } \np { margin: 10px 0; wh" +
"ite-space: pre-wrap; } \npre, li, ul { word-wrap: break-word; } \n\n.mark h1, .mark" +
" h2, .mark h3, .mark h4, .mark h5, .mark h6 {\nmargin: 1em 0 15px;\npadding: 0;\nfo" +
"nt-weight: bold;\nline-height: 1.7;\ncursor: text;\nposition: relative;\n}\n\nul, ol {" +
"\npadding: 0;\nmargin-top: 0;\nmargin-bottom: 0;\npadding-left: 20px;\n}\n\npre {\nbackg" +
"round-color: #f8f8f8;\nborder: 1px solid #ddd;\nline-height: 19px;\noverflow: auto;" +
"\npadding: 6px 10px;\nborder-radius: 3px;\nword-wrap: normal;\n}\ndl dt {\nfont-weight" +
": bold;\nfont-style: italic;\npadding: 0;\nmargin-top: 15px;\n}\nblockquote {\nborder-" +
"left: 4px solid #DDD;\npadding: 0 15px;\ncolor: #777;\n}\ntable {\nwidth: 100%;\noverf" +
"low: auto;\ndisplay: block;\n}\ntable tr {\nborder-top: 1px solid #ccc;\nbackground-c" +
"olor: #fff;\n}\ntable th {\nfont-weight: bold;\n}\ntable th, table td {\nborder: 1px s" +
"olid #d9d9e0;\nborder: 0.5px solid #d9d9d9;\npadding: 4px 11px;\n}\ntable tr:nth-chi" +
"ld(2n) {\nbackground-color: #f8f8f8;\n}\n.mark h2 {\nfont-size: 1.2em;\nborder-bottom" +
": 1px solid #eee;\n}\n.mark h1 {\nfont-size: 1.6em;\nborder-bottom: 1px solid #ddd;\n" +
"}\n\n.mark .label {\ndisplay: inline;\npadding: .2em .6em .2em;\nfont-size: 85%;\nfont" +
"-weight: 700;\nline-height: 1;\ncolor: #fff;\ntext-align: center;\nwhite-space: nowr" +
"ap;\nvertical-align: baseline;\nborder-radius: .25em;\n}\n.label-danger {\nbackground" +
"-color: #d9534f;\n}\n.label-success {\nbackground-color: #5cb85c;\n}\n.label-info {\nb" +
"ackground-color: #6e5494;\n}\n.label-default {\nbackground-color: #999;\n}\nul.task-l" +
"ist > li.task-list-item {\n  list-style-type: none;\n}\n.task-list-item-checkbox {\n" +
"  margin-left: -20px;\n  vertical-align: middle;\n}\n</style>\n<script>\nfunction siz" +
"e() { return document.body.scrollHeight; }\nfunction rs() { document.location.hre" +
"f = \'app://resize\'; }; window.onsize = rs;\nvar h = 0; setInterval(function() { i" +
"f (size() != h) { h = size(); rs(); } }, 300);\n</script>\n</head>\n<body>\n    <div" +
"");

WriteLiteral(" id=\"main\"");

WriteLiteral(">\n");


#line 195 "CommentsView.cshtml"
        

#line default
#line hidden

#line 195 "CommentsView.cshtml"
         foreach (var comment in Model.Comments)
        {


#line default
#line hidden
WriteLiteral("            <div");

WriteLiteral(" class=\"comment\"");

WriteLiteral(">\n                <img");

WriteAttribute ("src", " src=\"", "\""

#line 198 "CommentsView.cshtml"
, Tuple.Create<string,object,bool> ("", comment.AvatarUrl

#line default
#line hidden
, false)
);
WriteLiteral(">\n                <div>\n                    <h1>");


#line 200 "CommentsView.cshtml"
                   Write(comment.Name);


#line default
#line hidden
WriteLiteral("</h1>\n                    <h2>");


#line 201 "CommentsView.cshtml"
                   Write(comment.Date.Humanize());


#line default
#line hidden
WriteLiteral("</h2>\n                    <div");

WriteLiteral(" class=\"mark\"");

WriteLiteral(">");


#line 202 "CommentsView.cshtml"
                                        WriteLiteral(comment.Body);

#line default
#line hidden
WriteLiteral("</div>\n                </div>\n            </div>\n");


#line 205 "CommentsView.cshtml"
        }


#line default
#line hidden
WriteLiteral("    </div>\n</body>\n</html");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class CommentsViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
