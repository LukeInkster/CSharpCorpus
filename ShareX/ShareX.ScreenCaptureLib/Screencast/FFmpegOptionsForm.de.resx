<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="$this.Text" xml:space="preserve">
    <value>ShareX - FFmpeg Optionen</value>
  </data>
  <data name="btnCopyPreview.Text" xml:space="preserve">
    <value>Kopieren</value>
  </data>
  <data name="btnDownload.Text" xml:space="preserve">
    <value>Herunterladen</value>
  </data>
  <data name="btnHelp.Text" xml:space="preserve">
    <value>Hilfe...</value>
  </data>
  <data name="btnRefreshSources.Text" xml:space="preserve">
    <value>Erneuern</value>
  </data>
  <data name="btnTest.Text" xml:space="preserve">
    <value>Mit CMD austesten</value>
  </data>
  <data name="cbCustomCommands.Text" xml:space="preserve">
    <value>Eigene Befehle verwenden</value>
  </data>
  <data name="gbCodecs.Text" xml:space="preserve">
    <value>Codecs</value>
  </data>
  <data name="gbCommandLineArgs.Text" xml:space="preserve">
    <value>Ergänzende Befehlszeilenparameter</value>
  </data>
  <data name="gbCommandLinePreview.Text" xml:space="preserve">
    <value>Befehlszeilenvorschau</value>
  </data>
  <data name="gbSource.Text" xml:space="preserve">
    <value>Quellen</value>
  </data>
  <data name="lblAACQuality.Text" xml:space="preserve">
    <value>Bitrate:</value>
  </data>
  <data name="lblAudioCodec.Text" xml:space="preserve">
    <value>Audiocodec:</value>
  </data>
  <data name="lblAudioSource.Text" xml:space="preserve">
    <value>Audioquelle:</value>
  </data>
  <data name="lblCodec.Text" xml:space="preserve">
    <value>Videocodec:</value>
  </data>
  <data name="lblMP3Quality.Text" xml:space="preserve">
    <value>Qualität:</value>
  </data>
  <data name="lblVideoSource.Text" xml:space="preserve">
    <value>Videoquelle</value>
  </data>
  <data name="lblVorbisQuality.Text" xml:space="preserve">
    <value>Qualität:</value>
  </data>
  <data name="nudx264CRF.ToolTip" xml:space="preserve">
    <value>Constant Rate Factor (CRF): Die Spanne des Multiplikators ist 0-51: wobei 0 verlustfrei ist; 23 standard; und 51 das schlechteste
Ein kleinerer Wert heißt bessere Qualität und die subjektiv angemessenste Weite ist 18-28.
Man kann annehmen das 18 augenscheinlicherweise verlustfrei ist, oder fast: es sollte ganz oder fast wie der Input aussehen, ist aber theoretisch nicht verlustfrei.
Der Bereich ist exponentiell, also wenn man den Wert um +6 erhöht entspricht das grob der halben Bitrate, während -6 der Doppelten entspricht.
Normalerweise wählt man den höchsten CRF Wert, der noch akzeptable Ergebnisse erzielt.
Wenn der Output gut aussieht, dann versuche einen höheren Wert und wenn es dann schlecht aussieht benutze wieder den niedrigeren Wert.</value>
  </data>
  <data name="tbAACBitrate.ToolTip" xml:space="preserve">
    <value>Standard sind 128k.</value>
  </data>
  <data name="tbMP3_qscale.ToolTip" xml:space="preserve">
    <value>Die Spanne ist 0-9, wobei ein kleinerer Wert höherer Qualität entspricht. 0-3 produzieren normalerweise transparente Ergebnisse. 4 (Standard) sollte wahrnehmbar nahezu Transparenz entsprechen, 6 produziert "annehmbare Ergebnisse"</value>
  </data>
  <data name="tbVorbis_qscale.ToolTip" xml:space="preserve">
    <value>Die Spanne ist 0-10, wobei 10 die höchste Qualität ist. 3-6 ist eine gute Spanne zum Versuchen. Standard ist 3</value>
  </data>
  <data name="btnInstallHelperDevices.Text" xml:space="preserve">
    <value>Aufnahmegeräte Installieren</value>
  </data>
  <data name="cbGIFStatsMode.ToolTip" xml:space="preserve">
    <value>Standard ist "full".</value>
  </data>
  <data name="cbGIFDither.ToolTip" xml:space="preserve">
    <value>Standard ist "sierra2_4a".</value>
  </data>
  <data name="cbOverrideFFmpegPath.Text" xml:space="preserve">
    <value>Angepassten Pfad verwenden</value>
  </data>
  <data name="gbFFmpegExe.Text" xml:space="preserve">
    <value>FFmpeg Pfad</value>
  </data>
  <data name="lblGIFDither.Text" xml:space="preserve">
    <value>Dithering Modus:</value>
  </data>
  <data name="lblGIFStatsMode.Text" xml:space="preserve">
    <value>Palette Modus:</value>
  </data>
  <data name="lblHelperDevices.Text" xml:space="preserve">
    <value>Installiert die "screen-capture-recorder" und "virtual-audio-capturer" Video/Audio Quellen.</value>
  </data>
  <data name="lblVP8Bitrate.Text" xml:space="preserve">
    <value>Variable Bitrate:</value>
  </data>
  <data name="lblXvidQscale.Text" xml:space="preserve">
    <value>Variable Bitrate:</value>
  </data>
  <data name="lblx264Preset.Text" xml:space="preserve">
    <value>Voreinstellung:</value>
  </data>
  <data name="nudXvidQscale.ToolTip" xml:space="preserve">
    <value>1 ist die höchste Qualität/Dateigröße und 31 die niedrigste Qualität/kleinste Dateigröße.</value>
  </data>
  <data name="cbx264Preset.ToolTip" xml:space="preserve">
    <value>"Faster" Voreinstellung = Schnelle Enkodierung aber größere Dateien.
"Slower" Voreinstellung = Langsamere Enkodierung aber kleinere Dateien.
Für Echtzeitenkodierung (z.B. Bildschirmaufnahmen) muss die Voreinstellung so schnell wie möglich sein.</value>
  </data>
  <data name="pbAudioCodecWarning.ToolTip" xml:space="preserve">
    <value>Dieser Audiocodec wird vom ausgewählten Videocontainer nicht unterstützt.</value>
  </data>
  <data name="pbx264PresetWarning.ToolTip" xml:space="preserve">
    <value>Für Echtzeitenkodierungen wie Bildschirmaufnahmen sollte die Voreinstellung so schnell wie möglich sein.
Ansonsten kann es zu vielen Framedrops kommen.</value>
  </data>
</root>