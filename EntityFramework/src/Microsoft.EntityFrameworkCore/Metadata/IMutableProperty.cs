// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using Microsoft.EntityFrameworkCore.ValueGeneration;

namespace Microsoft.EntityFrameworkCore.Metadata
{
    /// <summary>
    ///     <para>
    ///         Represents a scalar property of an entity.
    ///     </para>
    ///     <para>
    ///         This interface is used during model creation and allows the metadata to be modified.
    ///         Once the model is built, <see cref="IProperty" /> represents a ready-only view of the same metadata.
    ///     </para>
    /// </summary>
    public interface IMutableProperty : IProperty, IMutableAnnotatable
    {
        /// <summary>
        ///     Gets the type that this property belongs to.
        /// </summary>
        new IMutableEntityType DeclaringEntityType { get; }

        /// <summary>
        ///     Gets or sets a value indicating whether this property can contain null.
        /// </summary>
        new bool IsNullable { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating when a value for this property will be generated by the database. Even when the
        ///     property is set to be generated by the database, EF may still attempt to save a specific value (rather than
        ///     having one generated by the database) when the entity is added and a value is assigned, or the property is
        ///     marked as modified for an existing entity. See <see cref="IsStoreGeneratedAlways" /> for more information.
        /// </summary>
        new ValueGenerated ValueGenerated { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether or not this property can be modified before the entity is
        ///     saved to the database. If true, an exception will be thrown if a value is assigned to
        ///     this property when it is in the <see cref="EntityState.Added" /> state.
        /// </summary>
        new bool IsReadOnlyBeforeSave { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether or not this property can be modified after the entity is
        ///     saved to the database. If true, an exception will be thrown if a new value is assigned to
        ///     this property after the entity exists in the database.
        /// </summary>
        new bool IsReadOnlyAfterSave { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether this property requires a <see cref="ValueGenerator" /> to generate
        ///     values when new entities are added to the context.
        /// </summary>
        new bool RequiresValueGenerator { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether this property is used as a concurrency token. When a property is configured
        ///     as a concurrency token the value in the database will be checked when an instance of this entity type
        ///     is updated or deleted during <see cref="DbContext.SaveChanges()" /> to ensure it has not changed since
        ///     the instance was retrieved from the database. If it has changed, an exception will be thrown and the
        ///     changes will not be applied to the database.
        /// </summary>
        new bool IsConcurrencyToken { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether or not the database will always generate a value for this property.
        ///     If set to true, a value will always be read back from the database whenever the entity is saved
        ///     regardless of the state of the property. If set to false, whenever a value is assigned to the property
        ///     (or marked as modified) EF will attempt to save that value to the database rather than letting the
        ///     database generate one.
        /// </summary>
        new bool IsStoreGeneratedAlways { get; set; }
    }
}
