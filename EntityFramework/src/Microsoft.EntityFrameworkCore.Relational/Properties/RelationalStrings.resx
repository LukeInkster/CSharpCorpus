<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ModificationFunctionInvalidEntityState" xml:space="preserve">
    <value>Cannot create a ModificationFunction for an entity in state '{entityState}'.</value>
  </data>
  <data name="UpdateConcurrencyException" xml:space="preserve">
    <value>Database operation expected to affect {expectedRows} row(s) but actually affected {actualRows} row(s). Data may have been modified or deleted since entities were loaded. See http://go.microsoft.com/fwlink/?LinkId=527962 for information on understanding and handling optimistic concurrency exceptions.</value>
  </data>
  <data name="MultipleProvidersConfigured" xml:space="preserve">
    <value>Multiple relational database provider configurations found. A context can only be configured to use a single database provider.</value>
  </data>
  <data name="NoProviderConfigured" xml:space="preserve">
    <value>No relational database providers are configured. Configure a database provider using OnConfiguring or by creating an ImmutableDbContextOptions with a database provider configured and passing it to the context.</value>
  </data>
  <data name="ConnectionAndConnectionString" xml:space="preserve">
    <value>Both an existing DbConnection and a connection string have been configured. When an existing DbConnection is used the connection string must be set on that connection.</value>
  </data>
  <data name="NoConnectionOrConnectionString" xml:space="preserve">
    <value>A relational store has been configured without specifying either the DbConnection or connection string to use.</value>
  </data>
  <data name="UnsupportedType" xml:space="preserve">
    <value>No mapping to a relational type can be found for the CLR type '{clrType}'.</value>
  </data>
  <data name="RelationalNotInUse" xml:space="preserve">
    <value>Relational-specific methods can only be used when the context is using a relational database provider.</value>
  </data>
  <data name="UpdateStoreException" xml:space="preserve">
    <value>An error occurred while updating the entries. See the inner exception for details.</value>
  </data>
  <data name="TransactionAlreadyStarted" xml:space="preserve">
    <value>The connection is already in a transaction and cannot participate in another transaction.</value>
  </data>
  <data name="TransactionAssociatedWithDifferentConnection" xml:space="preserve">
    <value>The specified transaction is not associated with the current connection. Only transactions associated with the current connection may be used.</value>
  </data>
  <data name="RelationalLoggerOpeningConnection" xml:space="preserve">
    <value>Opening connection to database '{database}' on server '{server}'.</value>
  </data>
  <data name="RelationalLoggerClosingConnection" xml:space="preserve">
    <value>Closing connection to database '{database}' on server '{server}'.</value>
  </data>
  <data name="RelationalLoggerBeginningTransaction" xml:space="preserve">
    <value>Beginning transaction with isolation level '{isolationLevel}'.</value>
  </data>
  <data name="RelationalLoggerCommittingTransaction" xml:space="preserve">
    <value>Committing transaction.</value>
  </data>
  <data name="RelationalLoggerRollingbackTransaction" xml:space="preserve">
    <value>Rolling back transaction.</value>
  </data>
  <data name="BadSequenceType" xml:space="preserve">
    <value>Invalid type for sequence. Valid types are 'Int64' (the default), 'Int32', 'Int16', and 'Byte'.</value>
  </data>
  <data name="BadSequenceString" xml:space="preserve">
    <value>Unable to deserialize sequence from model metadata. See inner exception for details.</value>
  </data>
  <data name="MigrationNotFound" xml:space="preserve">
    <value>The migration '{migrationName}' was not found.</value>
  </data>
  <data name="UnknownOperation" xml:space="preserve">
    <value>The current migration SQL generator '{sqlGeneratorType}' is unable to generate SQL for operations of type '{operationType}'.</value>
  </data>
  <data name="InvalidCommandTimeout" xml:space="preserve">
    <value>The specified CommandTimeout value is not valid. It must be a positive number.</value>
  </data>
  <data name="InvalidMaxBatchSize" xml:space="preserve">
    <value>The specified MaxBatchSize value is not valid. It must be a positive number.</value>
  </data>
  <data name="UnableToDiscriminate" xml:space="preserve">
    <value>Unable to materialize entity of type '{entityType}'. No discriminators were matched.</value>
  </data>
  <data name="DiscriminatorPropertyMustBeOnRoot" xml:space="preserve">
    <value>A discriminator property cannot be set for the entity type '{entityType}' because it is not the root of an inheritance hierarchy.</value>
  </data>
  <data name="DiscriminatorPropertyNotFound" xml:space="preserve">
    <value>Unable to set property '{property}' as a discriminator for entity type '{entityType}' because it is not a property of '{entityType}'.</value>
  </data>
  <data name="AmbientTransaction" xml:space="preserve">
    <value>An ambient transaction has been detected. Entity Framework Core does not support ambient transactions. See http://go.microsoft.com/fwlink/?LinkId=800142</value>
  </data>
  <data name="PossibleUnintendedUseOfEquals" xml:space="preserve">
    <value>Possible unintended use of method Equals(object) for arguments of different types: '{left}', '{right}'. This comparison will always return 'false'.</value>
  </data>
  <data name="PossibleIncorrectResultsUsingLikeOperator" xml:space="preserve">
    <value>Linq translation for method '{function}' used by this database provider can return incorrect results when the value argument contains wildcard characters (e.g. '%' or '_').</value>
  </data>
  <data name="StoredProcedureIncludeNotSupported" xml:space="preserve">
    <value>The Include operation is not supported when calling a stored procedure.</value>
  </data>
  <data name="GeneratingDown" xml:space="preserve">
    <value>Generating down script for migration '{migration}'.</value>
  </data>
  <data name="GeneratingUp" xml:space="preserve">
    <value>Generating up script for migration '{migration}'.</value>
  </data>
  <data name="ApplyingMigration" xml:space="preserve">
    <value>Applying migration '{migration}'.</value>
  </data>
  <data name="RevertingMigration" xml:space="preserve">
    <value>Reverting migration '{migration}'.</value>
  </data>
  <data name="UsingConnection" xml:space="preserve">
    <value>Using database '{database}' on server '{dataSource}'.</value>
  </data>
  <data name="FromSqlMissingColumn" xml:space="preserve">
    <value>The required column '{column}' was not present in the results of a 'FromSql' operation.</value>
  </data>
  <data name="DuplicateTableName" xml:space="preserve">
    <value>Cannot use table '{table}' in schema '{schema}' for entity '{entityType}' since it is being used for another entity.</value>
    <comment>Schema can be null</comment>
  </data>
  <data name="KeyHasDefaultValue" xml:space="preserve">
    <value>Property '{property}' on entity type '{entityType}' is part of a primary or alternate key but has a constant default value set. Constant default values are not useful for primary or alternate keys since these properties must always have non-null unqiue values.</value>
  </data>
  <data name="DiscriminatorEntityTypeNotDerived" xml:space="preserve">
    <value>Cannot configure the discriminator value for entity type '{entityType}' because it doesn't derive from '{rootEntityType}'.</value>
  </data>
  <data name="DiscriminatorValueIncompatible" xml:space="preserve">
    <value>Cannot set discriminator value '{value}' for discriminator property '{discriminator}' because it is not assignable to property of type '{discriminatorType}'.</value>
  </data>
  <data name="NoDiscriminatorForValue" xml:space="preserve">
    <value>Cannot set discriminator value for entity type '{entityType}' because the root entity type '{rootEntityType}' doesn't have a discriminator property set.</value>
  </data>
  <data name="NoDiscriminatorProperty" xml:space="preserve">
    <value>The entity type '{entityType}' is part of a hierarchy, but does not have a discriminator property configured.</value>
  </data>
  <data name="NoDiscriminatorValue" xml:space="preserve">
    <value>The entity type '{entityType}' is part of a hierarchy, but does not have a discriminator value configured.</value>
  </data>
  <data name="ClientEvalWarning" xml:space="preserve">
    <value>The LINQ expression '{expression}' could not be translated and will be evaluated locally.</value>
  </data>
  <data name="MissingParameterValue" xml:space="preserve">
    <value>No value provided for required parameter '{parameter}'.</value>
  </data>
  <data name="ParameterNotObjectArray" xml:space="preserve">
    <value>Cannot use the value provided for parameter '{parameter}' because it isn't assignable to type object[].</value>
  </data>
  <data name="RelationalLoggerExecutedCommand" xml:space="preserve">
    <value>Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}</value>
  </data>
  <data name="DuplicateColumnNameDataTypeMismatch" xml:space="preserve">
    <value>'{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different data types ('{dataType1}' and '{dataType2}').</value>
  </data>
  <data name="NoActiveTransaction" xml:space="preserve">
    <value>The connection does not have any active transactions.</value>
  </data>
  <data name="ConflictingRowUpdates" xml:space="preserve">
    <value>Two entities cannot make conflicting updates to the same row.</value>
  </data>
  <data name="IncorrectDefaultValueType" xml:space="preserve">
    <value>Cannot set default value '{value}' of type '{valueType}' on property '{property}' of type '{propertyType}' in entity type '{entityType}'.</value>
  </data>
  <data name="DuplicateDiscriminatorValue" xml:space="preserve">
    <value>The discriminator value for '{entityType1}' is '{discriminatorValue}' which is the same for '{entityType2}'. Every concrete entity type in the hierarchy needs to have a unique discriminator value.</value>
  </data>
  <data name="DuplicateColumnNameNullabilityMismatch" xml:space="preserve">
    <value>'{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different nullability.</value>
  </data>
  <data name="DuplicateColumnNameComputedSqlMismatch" xml:space="preserve">
    <value>'{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different computed values ('{value1}' and '{value2}').</value>
  </data>
  <data name="DuplicateColumnNameDefaultSqlMismatch" xml:space="preserve">
    <value>'{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different default values ('{value1}' and '{value2}').</value>
  </data>
  <data name="ConflictingColumnServerGeneration" xml:space="preserve">
    <value>{conflictingConfiguration} cannot be set for '{property}', because {existingConfiguration} is already set.</value>
  </data>
  <data name="DuplicateForeignKeyColumnMismatch" xml:space="preserve">
    <value>The foreign keys {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but with different columns ({columnNames1} and {columnNames2}).</value>
  </data>
  <data name="DuplicateForeignKeyDeleteBehaviorMismatch" xml:space="preserve">
    <value>The foreign keys {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but with different delete behavior ('{deleteBehavior1}' and '{deleteBehavior2}').</value>
  </data>
  <data name="DuplicateForeignKeyPrincipalColumnMismatch" xml:space="preserve">
    <value>The foreign keys {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but referencing different principal columns ({principalColumnNames1} and {principalColumnNames2}).</value>
  </data>
  <data name="DuplicateForeignKeyPrincipalTableMismatch" xml:space="preserve">
    <value>The foreign keys {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but referencing different principal tables ('{principalTable1}' and '{principalTable2}').</value>
  </data>
  <data name="DuplicateForeignKeyUniquenessMismatch" xml:space="preserve">
    <value>The foreign keys {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but with different uniqueness.</value>
  </data>
  <data name="DuplicateIndexColumnMismatch" xml:space="preserve">
    <value>The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}' but with different columns ({columnNames1} and {columnNames2}).</value>
  </data>
  <data name="DuplicateIndexUniquenessMismatch" xml:space="preserve">
    <value>The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}' but with different uniqueness.</value>
  </data>
  <data name="UnsupportedPropertyType" xml:space="preserve">
    <value>No mapping to a relational type can be found for property '{entity}.{property}' with the CLR type '{clrType}'.</value>
  </data>
</root>